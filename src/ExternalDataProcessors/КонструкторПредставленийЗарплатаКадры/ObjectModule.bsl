#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция МодульОбщегоНазначения() Экспорт
	Возврат ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
КонецФункции

// Описания представлений по конфигурации.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Описания представлений:
//	 * Ключ - Строка - Имя представления
//	 * Значение - Структура - См. НовоеОписаниеПредставления
//@skip-check doc-comment-complex-type-with-link
Функция ОписанияПредставленийПоКонфигурации() Экспорт

	ОписанияПредставлений = Новый Соответствие;

	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "ФактическиеОтпускаСотрудников";
	Описание.Подсистема = "ОстаткиОтпусков";
	Описание.ЕстьФильтр = Истина;
	ПоляЗапросаВДоступныеПоляПредставления(ОстаткиОтпусков.ЗапросВТФактическиеОтпускаСотрудников(ОстаткиОтпусков.ОписательВременныхТаблицДляСоздатьВТФактическиеОтпускаСотрудников(Неопределено,
																																												   "ВТ"),
																								 Истина).Текст,
										   Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "СвойстваСтатейФинансирования";
	Описание.Подсистема = "";
	Описание.ЕстьФильтр = Истина;
	ДобавитьПолеПредставления(Описание,
							  "СтатьяФинансирования",
							  "ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)");
	ДобавитьПолеПредставления(Описание, "НомерКолонки", "ВЫРАЗИТЬ(0 КАК ЧИСЛО(1))");
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "БухучетЗарплатыСотрудников";
	Описание.Подсистема = "ОтражениеЗарплатыВБухучете";
	Описание.ЕстьФильтр = Истина;
	ПоляЗапросаВДоступныеПоляПредставления(ОтражениеЗарплатыВБухучетеРасширенный.ЗапросПредставленияБухучетЗарплатыСотрудников(Истина,
																															   "ИмяВТ").Текст,
										   Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

	ДобавитьОписанияПредставлений_УправлениеШтатнымРасписанием(ОписанияПредставлений);
	ДобавитьОписанияПредставлений_КадровыйУчет(ОписанияПредставлений);
	ДобавитьОписанияПредставлений_УчетРабочегоВремени(ОписанияПредставлений);
	ДобавитьОписанияПредставлений_АттестацииСотрудников(ОписанияПредставлений);
	ДобавитьОписанияПредставлений_Медицина(ОписанияПредставлений);
	ДобавитьОписанияПредставлений_УчетБюджетныхУчреждений(ОписанияПредставлений);
	ДобавитьОписанияПредставлений_ОхранаТруда(ОписанияПредставлений);
	ДобавитьОписанияПредставлений_КадровоеПланирование(ОписанияПредставлений);
	ДобавитьОписанияПредставлений_ПодборПерсонала(ОписанияПредставлений);
	ДобавитьОписанияПредставлений_УчетНачисленнойЗарплаты(ОписанияПредставлений);
	ДобавитьОписанияПредставлений_Базовые(ОписанияПредставлений);

	Возврат ОписанияПредставлений;
		   	  	 	   			
	 //   	
 //   
 //   // Представление, обеспечивающее работу отчета АнализНачисленийИУдержаний, рассчитывает на наличие
 //   // временной таблицы отборов с именем ВТВсеПериодомКадровыхДанных.
 //   ИначеЕсли ВРег(ИмяПредставления) = ВРег("КадровыеДанныеСотрудниковАнализНачисленийИУдержаний") Тогда
 //   
 //   	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросПредставленияКадровыеДанныеСотрудниковАнализНачисленийИУдержаний(ТекстЗапроса, ТолькоРазрешенные);
 //   
 //   // Представление, обеспечивающее работу отчета АнализНачисленийИУдержаний, рассчитывает на набор кадровых данных
 //   // сотрудников, содержащемся в представлении КадровыеДанныеСотрудниковАнализНачисленийИУдержаний.
 //   ИначеЕсли ВРег(ИмяПредставления) = ВРег("ПодразделенияСортировкиСотрудников") Тогда
 //   	
 //   	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросПредставленияПодразделенияСортировкиСотрудников();
 //   	
 //   ИначеЕсли ВРег(ИмяПредставления) = ВРег("НачисленныеДоходыНДФЛ") Тогда
 //
 //   	Запрос = УчетНачисленнойЗарплаты.ЗапросВТНачисленныеДоходы("Представления_НачисленныеДоходыНДФЛ");
 //   	
 //   КонецЕсли;
 //		
	//ИначеЕсли ВРег(ИмяПредставления) = ВРег("ФункциональныеОпцииОрганизаций") Тогда
	//		
	//	МассивИменФункциональныхОпций =  ЗарплатаКадрыОбщиеНаборыДанных.МассивПолейЗапроса(Лев(ТекстЗапроса, ПозицияСловаПоместить - 1));
	//	
	//	Запрос = КадровыйУчетБазовый.ЗапросВТФункциональныеОпцииОрганизаций(
	//		ТолькоРазрешенные,
	//		ИмяИсточникаДанных,
	//		МассивИменФункциональныхОпций);
КонецФункции

Процедура Импортировать(ОписанияПредставлений) Экспорт

	Представления.Очистить();
	Поля.Очистить();
	Параметры.Очистить();

	МодульОбщегоНазначения = МодульОбщегоНазначения();

	Для Каждого КлючИзначение Из ОписанияПредставлений Цикл
		Описание = КлючИЗначение.Значение;

		ИдентификаторПредставления = Новый УникальныйИдентификатор;

		Представление = Представления.Добавить();
		ЗаполнитьЗначенияСвойств(Представление, Описание);
		Представление.ИдентификаторПредставления = ИдентификаторПредставления;

		Описание.ДоступныеПараметры.Сортировать("Обязательный УБЫВ, Имя");

		Для Каждого ДоступныйПараметр Из Описание.ДоступныеПараметры Цикл
			Параметр = Параметры.Добавить();
			ЗаполнитьЗначенияСвойств(Параметр, ДоступныйПараметр);
			Параметр.ИдентификаторПредставления = ИдентификаторПредставления;
			Параметр.ДоступныеТипы = МодульОбщегоНазначения.ЗначениеВСтрокуXML(ДоступныйПараметр.Тип);
		КонецЦикла;

		Для Каждого ДоступноеПоле Из Описание.ДоступныеПоля Цикл
			Поле = Поля.Добавить();
			ЗаполнитьЗначенияСвойств(Поле, ДоступноеПоле);
			Поле.ИдентификаторПредставления = ИдентификаторПредставления;
		КонецЦикла;

	КонецЦикла;

	Представления.Сортировать("Подсистема,Имя");

КонецПроцедуры

Процедура ИмпортироватьИзXML(АдресВоВременномХранилище) Экспорт

	ОписанияПредставлений = ОписанияПредставленийИзXML(АдресВоВременномХранилище);

	ВерсияПодсистемыЗарплатаКадры = ОписанияПредставлений.ВерсияПодсистемыЗарплатаКадры;
	ВерсияОписаний = ОписанияПредставлений.ВерсияОписаний;
	Импортировать(ОписанияПредставлений.Описания);

КонецПроцедуры

Функция ЭкспортироватьВXML(АдресВоВременномХранилище = Неопределено) Экспорт

	Структура = Новый Структура;
	Структура.Вставить("ВерсияПодсистемыЗарплатаКадры", ВерсияПодсистемыЗарплатаКадры);
	Структура.Вставить("ВерсияОписаний", ВерсияОписаний);
	Структура.Вставить("Описания", Новый Массив);

	МодульОбщегоНазначения = МодульОбщегоНазначения();

	Для Каждого Представление Из Представления Цикл

		Описание = НовоеОписаниеПредставления();
		ЗаполнитьЗначенияСвойств(Описание, Представление);

		ПараметрыОтбора = Новый Структура("ИдентификаторПредставления", Представление.ПолучитьИдентификатор());
		ПараметрыПредставления = Параметры.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Параметр Из ПараметрыПредставления Цикл
			ДобавитьПараметрПредставления(Описание,
										  Параметр.Имя,
										  МодульОбщегоНазначения.ЗначениеИзСтрокиXML(Параметр.ДоступныеТипы),
										  Параметр.Значение,
										  Параметр.Обязательный,
										  Параметр.Описание);
		КонецЦикла;

		ПоляПредставления = Поля.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Поле Из ПоляПредставления Цикл
			ДобавитьПолеПредставления(Описание, Поле.Имя, Поле.Выражение, Поле.Описание);
		КонецЦикла;

	КонецЦикла;

	СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Структура);

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xml");

	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ИмяВременногоФайла);
	ЗаписьТекста.Записать(СтрокаXML);
	ЗаписьТекста.Закрыть();

	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);

	УдалитьФайлы(ИмяВременногоФайла);

	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВоВременномХранилище);

КонецФункции

Функция ОписанияПредставленийИзXML(АдресВоВременномХранилище) Экспорт

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеТекста = Новый ЧтениеТекста(Поток);
	СтрокаXML = ЧтениеТекста.Прочитать();

	Описания = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML);

	ОбщегоНазначенияКлиентСервер.Проверить(ТипЗнч(Описания) = Тип("Структура")
										   И Описания.Свойство("ВерсияПодсистемыЗарплатаКадры")
										   И Описания.Свойство("ВерсияОписаний")
										   И Описания.Свойство("Описания")
										   И ТипЗнч(Описания.ВерсияОписаний) = Тип("Массив"),
										   "Невозможно импортировать указанный файл - неожиданная структура файла",
										   "ОписанияПредставленийИзXML");

	Возврат Описания;

КонецФункции

// Сформировать запрос представления.
// 
// Параметры:
//  ИмяПредставления - Строка - Имя представления
//  ОбязательныеПараметры - Массив из Строка - Обязательные параметры для представления
// 
// Возвращаемое значение:
//  Строка - Исполняемый текст запроса представления
Функция СформироватьЗапросПредставления(ИмяПредставления, Знач ОбязательныеПараметры = "") Экспорт

	ФейковыйЗапрос =
	"ВЫБРАТЬ
	|	""Псевдополе"" КАК Псевдополе
	|ПОМЕСТИТЬ Представления_ИмяПредставления
	|&ОбязательныеПараметры";

	ФейковыйЗапрос = СтрЗаменить(ФейковыйЗапрос, "ИмяПредставления", ИмяПредставления);

	Если ТипЗнч(ОбязательныеПараметры) = Тип("Строка") Тогда
		ОбязательныеПараметры = СтрРазделить(ОбязательныеПараметры, ", ", Ложь);
	КонецЕсли;

	Если ОбязательныеПараметры.Количество() = 0 Тогда
		ФейковыйЗапрос = СтрЗаменить(ФейковыйЗапрос, "&ОбязательныеПараметры", "");
	Иначе
		ФейковыйЗапрос = СтрЗаменить(ФейковыйЗапрос, "&ОбязательныеПараметры", "ГДЕ"
																			   + Символы.ПС
																			   + СтрСоединить(ОбязательныеПараметры,
																							  " = &ПсевдоПараметр"
																							  + Символы.ПС
																							  + "И "))
						 + " = &ПсевдоПараметр";
	КонецЕсли;

	МодульЗарплатаКадрыОбщиеНаборыДанных = МодульОбщегоНазначения().ОбщийМодуль("ЗарплатаКадрыОбщиеНаборыДанных");
	МодульЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(ФейковыйЗапрос);

	Возврат ФейковыйЗапрос;

КонецФункции

// Поля представлений зарплата кадры в доступные поля представления.
// 
// Параметры:
//  ПоляПредставлений - Массив Из Структура - Поля представлений
//  Описание - Структура - См. НовоеОписаниеПредставления
//@skip-check doc-comment-complex-type-with-link
Процедура ПоляПредставленийЗарплатаКадрыВДоступныеПоляПредставления(ПоляПредставлений, Описание) Экспорт

	Для Каждого ОписаниеПоля Из ПоляПредставлений Цикл
		ДобавитьПолеПредставления(Описание,
								  ОписаниеПоля.ИмяПоля,
								  ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов,
								  ОписаниеПоля.ПутьПоляСКД);
	КонецЦикла;

КонецПроцедуры

// Поля запроса в доступные поля.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  Описание - Структура - См. НовоеОписаниеПредставления
//  ИмяВТ - Неопределено, Строка - Имя ВТ
//@skip-check doc-comment-complex-type-with-link
Процедура ПоляЗапросаВДоступныеПоляПредставления(ТекстЗапроса, Описание, ИмяВТ = Неопределено) Экспорт

	МодульОбщегоНазначения = МодульОбщегоНазначения();

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ГраницаПакетаЗапросов = СхемаЗапроса.ПакетЗапросов.Количество() - 1;

	Для Индекс = 0 По ГраницаПакетаЗапросов Цикл
		ЗапросСхемыЗапроса = СхемаЗапроса.ПакетЗапросов[ГраницаПакетаЗапросов - Индекс];

		Если ТипЗнч(ЗапросСхемыЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;

		Если ИмяВТ <> Неопределено И ВРег(ЗапросСхемыЗапроса.ТаблицаДляПомещения) <> ВРег(ИмяВТ) Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого КолонкаСхемыЗапроса Из ЗапросСхемыЗапроса.Колонки Цикл
			ПустоеЗначение = "НЕОПРЕДЕЛЕНО";

			Если ТипЗнч(КолонкаСхемыЗапроса) = Тип("КолонкаСхемыЗапроса")
				 И КолонкаСхемыЗапроса.ТипЗначения.Типы().Количество() > 0 Тогда

				Тип = КолонкаСхемыЗапроса.ТипЗначения.Типы()[0]; // ОписаниеТипов

				Если МодульОбщегоНазначения.ЭтоСсылка(Тип) Тогда
					ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
					ПустоеЗначение = СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", ОбъектМетаданных.ПолноеИмя());
				ИначеЕсли Тип = Тип("Число") Тогда
					Разрядность = КолонкаСхемыЗапроса.ТипЗначения.КвалификаторыЧисла.Разрядность;
					РазрядностьДробнойЧасти = КолонкаСхемыЗапроса.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
					Если Разрядность > 0 Или РазрядностьДробнойЧасти > 0 Тогда

						ПустоеЗначение = СтрШаблон("ВЫРАЗИТЬ(0 КАК ЧИСЛО(%1, %2))",
												   Формат(Разрядность, "ЧН=; ЧГ=;"),
												   Формат(РазрядностьДробнойЧасти, "ЧН=; ЧГ=;"));
					Иначе
						ПустоеЗначение = "0";
					КонецЕсли;
				ИначеЕсли Тип = Тип("Строка") Тогда
					Если КолонкаСхемыЗапроса.ТипЗначения.КвалификаторыСтроки.Длина > 0 Тогда
						ПустоеЗначение = СтрШаблон("ВЫРАЗИТЬ("""" КАК СТРОКА(%1))",
												   Формат(КолонкаСхемыЗапроса.ТипЗначения.КвалификаторыСтроки.Длина,
														  "ЧН=; ЧГ=;"));
					Иначе
						ПустоеЗначение = """""";
					КонецЕсли;
				ИначеЕсли Тип = Тип("Булево") Тогда
					ПустоеЗначение = "ЛОЖЬ";
				ИначеЕсли Тип = Тип("Дата") Тогда
					ПустоеЗначение = "ДАТАВРЕМЯ(1, 1, 1)";
				Иначе
					// Обработка не требуется
				КонецЕсли;
			КонецЕсли;

			ДобавитьПолеПредставления(Описание, КолонкаСхемыЗапроса.Псевдоним, ПустоеЗначение);
		КонецЦикла;

		Прервать;
	КонецЦикла;

КонецПроцедуры

// Описание представления
// 
// Возвращаемое значение:
//  Структура - Новый описание представления:
// 	 * Подсистема - Строка - Имя подсистемы.
// 	 * Имя - Строка - Имя представления.
// 	 * ЕстьИсточникДанных - Булево - Признак использования источника данных (регистра).
// 	 * ЕстьФильтр - Булево - Признак возможности указания таблицы фильтра.
// 	 * ФильтрОбязателен - Булево - Признак обязательного фильтра (если ЕстьФильтр = Истина).
// 	 * ДоступныОтборы - Булево - Признак доступности отборов в параметрах.
// 	 * Описание - Строка - Текстовое описание представления, подсказки.
// 	 * ДоступныеПараметры - ТаблицаЗначений - Коллекция доступных параметров:
// 	 	* Имя - Строка - Имя параметра
// 	 	* Тип - ОписаниеТипов - Доступные типы параметра.
// 	 	* Значение - Неопределено, Булево, Строка, Число - Значение, если параметр не используется.
// 	 	* Обязательный - Булево - Признак обязательности параметра.
// 	 	* Описание - Строка - Подробное описание параметра.
// 	 * ДоступныеПоля - ТаблицаЗначений - Коллекция доступных полей.
// 	 	* Имя - Строка - Имя поля.
// 	 	* Выражение - Строка - Выражение пустого значения на языке запросов.
// 	 	* ПолныйПуть - Строка - Полный путь к полю. Для построения иерархии. Не используется в данный момент.
// 
//@skip-check doc-comment-field-name
Функция НовоеОписаниеПредставления() Экспорт

	Описание = Новый Структура;
	Описание.Вставить("Подсистема", "");
	Описание.Вставить("Имя", "");
	Описание.Вставить("ЕстьИсточникДанных", Ложь);
	Описание.Вставить("ЕстьФильтр", Ложь);
	Описание.Вставить("ФильтрОбязателен", Истина);
	Описание.Вставить("ДоступныОтборы", Ложь);
	Описание.Вставить("Описание", "");

	Описание.Вставить("ДоступныеПараметры", Новый ТаблицаЗначений);
	Описание.ДоступныеПараметры.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Описание.ДоступныеПараметры.Колонки.Добавить("Тип", Новый ОписаниеТипов);
	Описание.ДоступныеПараметры.Колонки.Добавить("Значение", ОписаниеТипаВсеТипыПараметраПредставления());
	Описание.ДоступныеПараметры.Колонки.Добавить("Обязательный", Новый ОписаниеТипов("Булево"));
	Описание.ДоступныеПараметры.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));

	Описание.Вставить("ДоступныеПоля", Новый ТаблицаЗначений);
	Описание.ДоступныеПоля.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Описание.ДоступныеПоля.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	Описание.ДоступныеПоля.Колонки.Добавить("ПолныйПуть", Новый ОписаниеТипов("Строка"));
	Описание.ДоступныеПоля.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));

	ДобавитьПараметрПредставления(Описание, "ТолькоРазрешенные", ОписаниеТипаБулево(), Истина);

	//@skip-check constructor-function-return-section
	Возврат Описание;

КонецФункции

// Добавляет новый параметр к описанию представления
// 
// Параметры:
//  ОписаниеПредставления - Структура - Описание. См. НовоеОписаниеПредставления
//  Имя - Строка - Имя параметра
//  Тип - ОписаниеТипов, Тип - Тип параметра
//  Значение - Неопределено, Булево, Строка, Число, Дата - Значение
//  Обязательный - Булево - Обязательность параметра
//  ЗначениеЭтоВыражение - Булево - Признак, что строковое значение параметра представляет собой выражение языка запросов
//  Описание - Строка - Подробное текстовое описание параметра
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - Добавить параметр представления
Функция ДобавитьПараметрПредставления(ОписаниеПредставления,
									  Имя,
									  Тип,
									  Значение = Неопределено,
									  Обязательный = Ложь,
									  ЗначениеЭтоВыражение = Ложь,
									  Описание = "") Экспорт

	ИмяФункции = "ДобавитьПараметрПредставления";

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяФункции,
												   "ОписаниеПредставления",
												   ОписаниеПредставления,
												   Тип("Структура"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяФункции, "Имя", Имя, Тип("Строка"));
	Если Значение <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяФункции,
													   "Значение",
													   Значение,
													   ОписаниеТипаВсеТипыПараметраПредставления());
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяФункции, "Обязательный", Обязательный, Тип("Булево"));

	ДопустимыеТипыПараметраТип = Новый Массив;
	ДопустимыеТипыПараметраТип.Добавить(Тип("ОписаниеТипов"));
	ДопустимыеТипыПараметраТип.Добавить(Тип("Тип"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяФункции, "Тип", Тип, ДопустимыеТипыПараметраТип);

	Параметр = ОписаниеПредставления.ДоступныеПараметры.Добавить();
	Параметр.Имя = Имя;
	Параметр.Значение = Значение;
	Параметр.Обязательный = Обязательный;
	Параметр.Описание = Описание;

	Если ТипЗнч(Тип) = Тип("Тип") Тогда
		МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип);
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Параметр.Тип = ОписаниеТипа;
	Иначе
		Параметр.Тип = Тип;
	КонецЕсли;

	Возврат Параметр;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьПолеПредставления(ОписаниеПредставления, Имя, Выражение, ПолныйПуть = "", Описание = "") Экспорт

	ИмяФункции = "ДобавитьПолеПредставления";

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяФункции,
												   "ОписаниеПредставления",
												   ОписаниеПредставления,
												   Тип("Структура"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяФункции, "Имя", Имя, Тип("Строка"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяФункции, "Выражение", ПолныйПуть, Тип("Строка"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяФункции, "Выражение", ПолныйПуть, Тип("Строка"));

	Поле = ОписаниеПредставления.ДоступныеПоля.Добавить();
	Поле.Имя = Имя;
	Поле.Выражение = Выражение;
	Поле.ПолныйПуть = ПолныйПуть;
	Поле.Описание = Описание;

	Возврат Поле;

КонецФункции

Процедура ДобавитьОписанияПредставлений_АттестацииСотрудников(ОписанияПредставлений)

	Если Не МодульОбщегоНазначения().ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		Возврат;
	КонецЕсли;

	ИмяПодсистемы = "АттестацииСотрудников";
	Обязательный = Истина;
	
	// СотрудникиПодлежащиеАттестации
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "СотрудникиПодлежащиеАттестации";
	Описание.Подсистема = ИмяПодсистемы;
	ДобавитьПараметрПредставления(Описание, "НачалоПериода", ОписаниеТипаДата(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "КонецПериода", ОписаниеТипаДата(), , Обязательный);
	ПоляЗапросаВДоступныеПоляПредставления(СформироватьЗапросПредставления(Описание.Имя,
																		   "НачалоПериода,ОкончаниеПериода"), Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);
	
	// РезультатыАттестацииСотрудников
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "РезультатыАттестацииСотрудников";
	Описание.Подсистема = ИмяПодсистемы;
	ДобавитьПараметрПредставления(Описание, "НачалоПериода", ОписаниеТипаДата(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "КонецПериода", ОписаниеТипаДата(), , Обязательный);
	ПоляЗапросаВДоступныеПоляПредставления(СформироватьЗапросПредставления(Описание.Имя), Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

КонецПроцедуры

Процедура ДобавитьОписанияПредставлений_УчетНачисленнойЗарплаты(ОписанияПредставлений)

	Если Не МодульОбщегоНазначения().ПодсистемаСуществует("ЗарплатаКадрыРасширенная.УчетНачисленнойЗарплаты") Тогда
		Возврат;
	КонецЕсли;

	ИмяПодсистемы = "УчетНачисленнойЗарплаты";

	МодульЗарплатаКадрыОбщиеНаборыДанных = МодульОбщегоНазначения().ОбщийМодуль("ЗарплатаКадрыОбщиеНаборыДанных");

	Обязательный = Истина;
	
	// Регистр, по которому выполняется запрос по отработанному времени, относится к подсистеме УчетНачисленнойЗарплаты,
	// а представление в общем модуле общих наборов.
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "ОтработанноеВремя";
	Описание.Подсистема = ИмяПодсистемы;
	ДобавитьПараметрПредставления(Описание, "НачалоПериода", ОписаниеТипаДата(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "ОкончаниеПериода", ОписаниеТипаДата(), , Обязательный);
	ЗапросВТПредставленияОтработанноеВремя = МодульЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТПредставленияОтработанноеВремя("ВТ",
																														 '00010101',
																														 '00010101');
	ПоляЗапросаВДоступныеПоляПредставления(ЗапросВТПредставленияОтработанноеВремя.Текст, Описание);

	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

КонецПроцедуры

Процедура ДобавитьОписанияПредставлений_УправлениеШтатнымРасписанием(ОписанияПредставлений)

	Если Не МодульОбщегоНазначения().ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.УправлениеШтатнымРасписанием") Тогда
		Возврат;
	КонецЕсли;

	ИмяПодсистемы = "УправлениеШтатнымРасписанием";

	Обязательный = Истина;
	НеОбязательный = Ложь;

	МодульУправлениеШтатнымРасписанием = МодульОбщегоНазначения().ОбщийМодуль("УправлениеШтатнымРасписанием");
		
	// Управление штатным расписанием
	Описание = НовоеОписаниеПредставления();
	Описание.Подсистема = ИмяПодсистемы;
	Описание.Имя = "ШтатноеРасписание";
	Описание.ЕстьФильтр = Истина;
	ДобавитьПараметрПредставления(Описание, "ВключатьНачисления", Тип("Булево"), Истина, НеОбязательный);
	ДобавитьПараметрПредставления(Описание, "ВключаяЗакрытые", Тип("Булево"), Ложь, НеОбязательный);
	ДобавитьПараметрПредставления(Описание, "ДатаАктуальности", Тип("Строка"), , Обязательный);

	ПараметрыПостроения = МодульУправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписание();
	ПараметрыПостроения.ДополнитьОписаниемНачислений = Истина;
	ПараметрыПостроения.ПолноеОписаниеНачислений = Истина;
	ПараметрыПостроения.Льготы = Истина;
	ПараметрыПостроения.УправленческиеНачисления = Истина;

	ЗапросВТШтатноеРасписание = МодульУправлениеШтатнымРасписанием.ЗапросВТШтатноеРасписание(Истина,
																							 ПараметрыПостроения);

	ПоляЗапросаВДоступныеПоляПредставления(ЗапросВТШтатноеРасписание.Текст, Описание);

	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

КонецПроцедуры

Процедура ДобавитьОписанияПредставлений_Базовые(ОписанияПредставлений)

	Если Не МодульОбщегоНазначения().ПодсистемаСуществует("ЗарплатаКадрыПодсистемы") Тогда
		Возврат;
	КонецЕсли;

	Обязательный = Истина;
	НеОбязательный = Ложь;

	МодульЗарплатаКадрыОбщиеНаборыДанных = МодульОбщегоНазначения().ОбщийМодуль("ЗарплатаКадрыОбщиеНаборыДанных");

	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "Периоды";
	ДобавитьПараметрПредставления(Описание, "НачалоИнтервала", ОписаниеТипаСтрока(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "ОкончаниеИнтервала", ОписаниеТипаСтрока(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "Периодичность", ОписаниеТипаСтрока(), "МЕСЯЦ", НеОбязательный);
	ДобавитьПараметрПредставления(Описание, "ИспользоватьКонецПериода", ОписаниеТипаБулево(), Ложь, НеОбязательный);
	
	ЗапросВТПериоды = МодульЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТПериоды("&НачалоИнтервала", "&ОкончаниеИнтервала");
	ПоляЗапросаВДоступныеПоляПредставления(ЗапросВТПериоды.Текст, Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "СрезПоследних";
	Описание.ЕстьФильтр = Истина;
	Описание.ЕстьИсточникДанных = Истина;
	Описание.ДоступныОтборы = Истина;
	ДобавитьПараметрПредставления(Описание, "ПсевдонимыПолейСКД", ОписаниеТипаСтрока(), "", НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "ПараметрыПостроения_ФормироватьСПериодичностьДень",
								  ОписаниеТипаБулево(),
								  Истина,
								  НеОбязательный);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

	Описание = МодульОбщегоНазначения().СкопироватьРекурсивно(Описание);
	Описание.Имя = "СрезПервых";
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

	Описание = МодульОбщегоНазначения().СкопироватьРекурсивно(Описание);
	Описание.Имя = "ТаблицаРегистра";
	ДобавитьПараметрПредставления(Описание,
								  "ПараметрыПостроения_ВключатьЗаписиНаНачалоПериода",
								  ОписаниеТипаБулево(),
								  Ложь,
								  НеОбязательный);

	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

КонецПроцедуры

Процедура ДобавитьОписанияПредставлений_УчетРабочегоВремени(ОписанияПредставлений)

	Если Не МодульОбщегоНазначения().ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.УчетРабочегоВремени") Тогда
		Возврат;
	КонецЕсли;

	ИмяПодсистемы = "УчетРабочегоВремени";

	Обязательный = Истина;
	НеОбязательный = Ложь;

	МодульУчетРабочегоВремениРасширенный = МодульОбщегоНазначения().ОбщийМодуль("УчетРабочегоВремениРасширенный");
	МодульЗарплатаКадрыОбщиеНаборыДанных = МодульОбщегоНазначения().ОбщийМодуль("ЗарплатаКадрыОбщиеНаборыДанных");
	
	// ДанныеУчетаРабочегоВремениСотрудников
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "ДанныеУчетаРабочегоВремениСотрудников";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.ЕстьФильтр = Истина;
	ДобавитьПараметрПредставления(Описание, "ДатаНачала", ОписаниеТипаДата(), '00010101', Обязательный);
	ДобавитьПараметрПредставления(Описание, "ДатаОкончания", ОписаниеТипаДата(), '00010101', Обязательный);
	ДобавитьПараметрПредставления(Описание, "ПолучатьДанныеФакт", ОписаниеТипаБулево(), Истина, НеОбязательный);
	ДобавитьПараметрПредставления(Описание, "ПолучатьДанныеПлан", ОписаниеТипаБулево(), Ложь, НеОбязательный);
	ДобавитьПараметрПредставления(Описание, "ПолучатьДанныеНорма", ОписаниеТипаБулево(), Истина, НеОбязательный);
	ДобавитьПараметрПредставления(Описание, "Индексировать", ОписаниеТипаБулево(), Ложь, НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "ИспользоватьУжеРассчитанныеДанные",
								  ОписаниеТипаБулево(),
								  Истина,
								  НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "ФормироватьПриНаличииРассчитанныхДанных",
								  ОписаниеТипаБулево(),
								  Истина,
								  НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "ПолучатьУсловияТрудаИТерритории",
								  ОписаниеТипаБулево(),
								  Ложь,
								  НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "УчитыватьТабельныеДанныеОТерриториях",
								  ОписаниеТипаБулево(),
								  Истина,
								  НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "ПолучатьНормуВремениЗаПолныйМесяц",
								  ОписаниеТипаБулево(),
								  Ложь,
								  НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "УчитыватьТолькоИндивидуальныеСведения",
								  ОписаниеТипаБулево(),
								  Ложь,
								  НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "ОтноситьПереходящуюЧастьСменыКДнюНачала",
								  ОписаниеТипаБулево(),
								  Ложь,
								  НеОбязательный);

	ПараметрыПолученияДанных = МодульУчетРабочегоВремениРасширенный.ПараметрыПолученияДанныхУчетаВремени();
	ЗапросВТДанныеУчетаРабочегоВремениСотрудников = МодульУчетРабочегоВремениРасширенный.ЗапросВТДанныеУчетаРабочегоВремениСотрудников(Истина,
																																	   ПараметрыПолученияДанных);
	ПоляЗапросаВДоступныеПоляПредставления(ЗапросВТДанныеУчетаРабочегоВремениСотрудников.Текст, Описание);

	ОписанияПредставлений.Вставить(Описание.Имя, Описание);
	
	// ДанныеУчетаВремениИСостоянийСотрудников
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "ДанныеУчетаВремениИСостоянийСотрудников";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.ЕстьФильтр = Истина;

	ДобавитьПараметрПредставления(Описание, "ДатаНачала", ОписаниеТипаДата(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "ДатаОкончания", ОписаниеТипаДата(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "МесяцДатаНачала", ОписаниеТипаДата(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "МесяцДатаОкончания", ОписаниеТипаДата(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "ДатаАктуальности", ОписаниеТипаДата(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "Организация", ОписаниеТипаДата(), , НеОбязательный);
	ДобавитьПараметрПредставления(Описание, "Подразделение", ОписаниеТипаДата(), , НеОбязательный);
	ДобавитьПараметрПредставления(Описание, "РассчитыватьПлановоеВремя", ОписаниеТипаБулево(), Ложь, НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "ПолучатьУжеРассчитанныеДанные",
								  ОписаниеТипаБулево(),
								  Истина,
								  НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "ПолучатьУсловияТрудаИТерритории",
								  ОписаниеТипаБулево(),
								  Ложь,
								  НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "ВыделятьВыходныеВПериодыОтклонений",
								  ОписаниеТипаБулево(),
								  Истина,
								  НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "УчитыватьТабельныеДанныеОТерриториях",
								  ОписаниеТипаБулево(),
								  Истина,
								  НеОбязательный);
	ДобавитьПараметрПредставления(Описание,
								  "ОтноситьПереходящуюЧастьСменыКДнюНачала",
								  ОписаниеТипаБулево(),
								  Ложь,
								  НеОбязательный);

	ФейковыйЗапрос =
	"ВЫБРАТЬ
	|	""Псевдополе"" КАК Псевдополе
	|ПОМЕСТИТЬ Представления_ДанныеУчетаВремениИСостоянийСотрудников
	|ИЗ
	|	ПсевдоФильтр
	|ГДЕ
	|	""ДатаНачала"" = &ДатаНачала
	|	И ""ДатаОкончания"" = &ДатаОкончания
	|	И ""МесяцДатаНачала"" = &МесяцДатаНачала
	|	И ""МесяцДатаОкончания"" = &МесяцДатаОкончания
	|	И ""ДатаАктуальности"" = &ДатаАктуальности";
	МодульЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(ФейковыйЗапрос);
	ПоляЗапросаВДоступныеПоляПредставления(ФейковыйЗапрос, Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);
	
	// ПлановоеВремя
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "ПлановоеВремя";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.ЕстьФильтр = Истина;
	ДобавитьПараметрПредставления(Описание, "ДатаНачала", ОписаниеТипаДата(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "ДатаОкончания", ОписаниеТипаДата(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "ДатаАктуальности", ОписаниеТипаДата(), , Обязательный);

	ФейковыйЗапрос =
	"ВЫБРАТЬ
	|	""Псевдополе"" КАК Псевдополе
	|ПОМЕСТИТЬ Представления_ПлановоеВремя
	|ИЗ
	|	ПсевдоФильтр
	|ГДЕ
	|	""ДатаНачала"" = &ДатаНачала
	|	И ""ДатаОкончания"" = &ДатаОкончания
	|	И ""ДатаАктуальности"" = &ДатаАктуальности";
	МодульЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(ФейковыйЗапрос);
	ПоляЗапросаВДоступныеПоляПредставления(ФейковыйЗапрос, Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

КонецПроцедуры

Процедура ДобавитьОписанияПредставлений_КадровыйУчет(ОписанияПредставлений)

	Если Не МодульОбщегоНазначения().ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.КадровыйУчет") Тогда
		Возврат;
	КонецЕсли;

	МодульКадровыйУчет = МодульОбщегоНазначения().ОбщийМодуль("КадровыйУчет");
	МодульКадровыйУчетРасширенный = МодульОбщегоНазначения().ОбщийМодуль("КадровыйУчетРасширенный");

	Обязательный = Истина;
	НеОбязательный = Ложь;
	ИмяПодсистемы = "КадровыйУчет";
	
	// КадровыеДанныеСотрудников
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "КадровыеДанныеСотрудников";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.ЕстьФильтр = Истина;
	Описание.ДоступныОтборы = Истина;
	ДобавитьПараметрПредставления(Описание,
								  "ФормироватьСПериодичностьДень",
								  ОписаниеТипаБулево(),
								  Истина,
								  НеОбязательный);

	ПоляПредставленийЗарплатаКадрыВДоступныеПоляПредставления(МодульКадровыйУчет.ПоляПредставленийКадровыхДанныхСотрудников(),
															  Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);
	
	// КадровыеДанныеФизическихЛиц
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "КадровыеДанныеФизическихЛиц";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.ЕстьФильтр = Истина;
	Описание.ДоступныОтборы = Истина;
	ПоляПредставленийЗарплатаКадрыВДоступныеПоляПредставления(МодульКадровыйУчет.ПоляПредставленийКадровыхДанныхФизическихЛиц(),
															  Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);
	
	// РабочиеМестаСотрудников
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "РабочиеМестаСотрудников";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.ЕстьФильтр = Истина;
	ДобавитьПараметрПредставления(Описание, "Организация", ОписаниеТипаСтрока(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "Подразделение", ОписаниеТипаСтрока(), , Обязательный);
	ПараметрыПостроения = МодульКадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
	ЗапросВТРабочиеМестаСотрудников = МодульКадровыйУчет.ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(Истина,
																										   "ВТ",
																										   ПараметрыПостроения);
	ПоляЗапросаВДоступныеПоляПредставления(ЗапросВТРабочиеМестаСотрудников.Текст, Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);
	
	// СотрудникиОрганизации
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "СотрудникиОрганизации";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.ЕстьФильтр = Истина;
	Описание.ФильтрОбязателен = Ложь;
	ДобавитьПараметрПредставления(Описание, "Организация", ОписаниеТипаСтрока(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "Подразделение", ОписаниеТипаСтрока(), , Обязательный);
	ДобавитьПараметрПредставления(Описание, "ОтбиратьПоГоловнойОрганизации", ОписаниеТипаБулево(), Ложь, НеОбязательный);
	ДобавитьПараметрПредставления(Описание, "НачалоПериода", ОписаниеТипаСтрока(), Неопределено, НеОбязательный);
	ДобавитьПараметрПредставления(Описание, "ОкончаниеПериода", ОписаниеТипаСтрока(), Неопределено, НеОбязательный);
	//@skip-check bsl-legacy-check-dynamic-feature-access
	ПараметрыПостроения = МодульКадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	//@skip-check bsl-legacy-check-dynamic-feature-access
	ЗапросВТСотрудникиОрганизации = МодульКадровыйУчет.ЗапросВТСотрудникиОрганизации(Истина, "ВТ", ПараметрыПостроения);
	ПоляЗапросаВДоступныеПоляПредставления(ЗапросВТСотрудникиОрганизации.Текст, Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);
	
	// ПлановыеНачисленияСотрудников
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "ПлановыеНачисленияСотрудников";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.ЕстьФильтр = Истина;
	ДобавитьПараметрПредставления(Описание,
								  "ФормироватьСПериодичностьДень",
								  ОписаниеТипаБулево(),
								  Истина,
								  НеОбязательный);
	ПоляЗапросаВДоступныеПоляПредставления(МодульКадровыйУчетРасширенный.ЗапросВТПлановыеНачисленияСотрудников(Истина,
																											   "ВТ",
																											   "ВТ2").Текст,
										   Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);
	
	// ПлановыеУдержанияСотрудников
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "ПлановыеУдержанияСотрудников";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.ЕстьФильтр = Истина;
	ПоляЗапросаВДоступныеПоляПредставления(МодульКадровыйУчетРасширенный.ЗапросВТПлановыеУдержанияСотрудников(Истина,
																											  "ВТ",
																											  "ВТ2").Текст,
										   Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);
	
	// СтажиСотрудников
	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "СтажиСотрудников";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.ЕстьФильтр = Истина;
	ПоляЗапросаВДоступныеПоляПредставления(МодульКадровыйУчетРасширенный.ЗапросВТСтажиФизическихЛиц(Истина,
																									МодульКадровыйУчетРасширенный.ОписательВременнойТаблицыОтборовДляВТСтажиФизическихЛиц("ВТ"),
																									"ВТ2").Текст,
										   Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

КонецПроцедуры

Процедура ДобавитьОписанияПредставлений_ПодборПерсонала(ОписанияПредставлений)

	Если Не МодульОбщегоНазначения().ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала")
		 Или Не ПолучитьФункциональнуюОпцию("ИспользоватьПодборПерсонала") Тогда

		Возврат;
	КонецЕсли;

	ИмяПодсистемы = "ПодборПерсонала";

	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "СведенияОКандидатах";
	Описание.Подсистема = ИмяПодсистемы;
	ПоляЗапросаВДоступныеПоляПредставления(СформироватьЗапросПредставления(Описание.Имя), Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "ЛичныеДанныеКандидатов";
	Описание.Подсистема = ИмяПодсистемы;
	ПоляЗапросаВДоступныеПоляПредставления(СформироватьЗапросПредставления(Описание.Имя), Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "СтажПринятыхКандидатов";
	Описание.Подсистема = ИмяПодсистемы;
	ПоляЗапросаВДоступныеПоляПредставления(СформироватьЗапросПредставления(Описание.Имя), Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

КонецПроцедуры

Процедура ДобавитьОписанияПредставлений_КадровоеПланирование(ОписанияПредставлений)

	Если Не МодульОбщегоНазначения().ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровоеПланирование")
		 Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровоеПланирование") Тогда

		Возврат;
	КонецЕсли;

	ИмяПодсистемы = "КадровоеПланирование";

	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "ПоказателиКадровогоПлана";
	Описание.Подсистема = ИмяПодсистемы;
	ДобавитьПараметрПредставления(Описание, "СценарийОбязателен", ОписаниеТипаБулево(), Ложь);
	ПоляЗапросаВДоступныеПоляПредставления(СформироватьЗапросПредставления(Описание.Имя), Описание);

	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

КонецПроцедуры

Процедура ДобавитьОписанияПредставлений_ОхранаТруда(ОписанияПредставлений)

	Если Не МодульОбщегоНазначения().ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		Возврат;
	КонецЕсли;

	ИмяПодсистемы = "ОхранаТруда";

	Если МодульОбщегоНазначения().ОбщийМодуль("РабочиеМестаОхраныТруда").РабочиеМестаОхраныТрудаИспользуются() Тогда

		Описание = НовоеОписаниеПредставления();
		Описание.Имя = "РабочиеМестаОхраныТруда";
		Описание.Подсистема = ИмяПодсистемы;
		ДобавитьПараметрПредставления(Описание, "ДатаАктуальности", ОписаниеТипаДата(), Неопределено);
		ДобавитьПараметрПредставления(Описание, "ЭтоИнструктажи", Новый ОписаниеТипов("Булево"), Неопределено);
		ДобавитьПараметрПредставления(Описание, "ЭтоМедосмотры", Новый ОписаниеТипов("Булево"), Неопределено);
		ДобавитьПараметрПредставления(Описание, "ЭтоНесчастныеСлучаи", Новый ОписаниеТипов("Булево"), Неопределено);
		ДобавитьПараметрПредставления(Описание, "ЭтоСОУТ", Новый ОписаниеТипов("Булево"), Неопределено);
		ДобавитьПараметрПредставления(Описание, "ЭтоСИЗ", Новый ОписаниеТипов("Булево"), Неопределено);
		ПоляЗапросаВДоступныеПоляПредставления(СформироватьЗапросПредставления(Описание.Имя), Описание);

		ОписанияПредставлений.Вставить(Описание.Имя, Описание);

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьОписанияПредставлений_УчетБюджетныхУчреждений(ОписанияПредставлений)

	Если Не МодульОбщегоНазначения().ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Возврат;
	КонецЕсли;
	
//	ИмяПодсистемы = "Медицина";
//	МодульЗарплатаКадрыОбщиеНаборыДанных = МодульОбщегоНазначения().ОбщийМодуль("ЗарплатаКадрыОбщиеНаборыДанных");
	
	// TODO: Получить описание из ЗГУ
	//Если Запрос = Неопределено Тогда
	//	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
	//		МодульУчетБюджетныхУчреждений = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
	//		Запрос = МодульУчетБюджетныхУчреждений.ЗапросПоПредставлению(ИмяПредставления, ПараметрыЗапроса);
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ДобавитьОписанияПредставлений_Медицина(ОписанияПредставлений)

	Если Не МодульОбщегоНазначения().ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		Возврат;
	КонецЕсли;

	ИмяПодсистемы = "Медицина";

	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "СертификатыПоСпециальностиФизическихЛиц";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.Описание = "Обязателен фильтр ВТОсновныеСотрудники";
	ПоляЗапросаВДоступныеПоляПредставления(СформироватьЗапросПредставления(Описание.Имя), Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

	Описание = НовоеОписаниеПредставления();
	Описание.Имя = "СведенияОбАккредитацияхСпециалистов";
	Описание.Подсистема = ИмяПодсистемы;
	Описание.Описание = "Обязателен фильтр ВТОсновныеСотрудники";
	ПоляЗапросаВДоступныеПоляПредставления(СформироватьЗапросПредставления(Описание.Имя), Описание);
	ОписанияПредставлений.Вставить(Описание.Имя, Описание);

КонецПроцедуры

// Описание типа булево.
// 
// Возвращаемое значение:
//  ОписаниеТипов - Описание типа булево
Функция ОписаниеТипаБулево()
	Типы = Новый Массив; // Массив Из Тип
	Типы.Добавить(Тип("Строка"));
	Типы.Добавить(Тип("Булево"));

	Возврат Новый ОписаниеТипов(Типы);
КонецФункции

Функция ОписаниеТипаСтрока()
	Возврат Новый ОписаниеТипов("Строка");
КонецФункции

Функция ОписаниеТипаДата()
	Типы = Новый Массив; // Массив Из Тип
	Типы.Добавить(Тип("Дата"));
	Типы.Добавить(Тип("Строка"));

	Возврат Новый ОписаниеТипов(Типы);
КонецФункции

Функция ОписаниеТипаВсеТипыПараметраПредставления()
	Типы = Новый Массив; // Массив Из Тип
	Типы.Добавить(Тип("Дата"));
	Типы.Добавить(Тип("Строка"));
	Типы.Добавить(Тип("Булево"));
	Типы.Добавить(Тип("Число"));

	Возврат Новый ОписаниеТипов(Типы);
КонецФункции

// Поля запроса в доступные поля.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  Описание - Структура - Описание представления. См. НовоеОписаниеПредставления
//  ИмяВТ - Неопределено, Строка - Имя ВТ
//Процедура ПоляЗапросаВДоступныеПоляПредставления_ПоСтроке(ТекстЗапроса, Описание, ИмяВТ = Неопределено)
//
//	Если ИмяВТ <> Неопределено Тогда
//		ПозицияСловаПоместить = СтрНайти(ТекстЗапроса, "ПОМЕСТИТЬ " + ИмяВТ);
//	Иначе
//		ПозицияСловаПоместить = СтрНайти(ТекстЗапроса, "ПОМЕСТИТЬ ", НаправлениеПоиска.СКонца);
//	КонецЕсли;
//
//	ПозицияСловаВыбрать = СтрНайти(ТекстЗапроса, "ВЫБРАТЬ ", НаправлениеПоиска.СКонца, ПозицияСловаПоместить);
//	ТекстПолейЗапроса = Сред(ТекстЗапроса, ПозицияСловаВыбрать, ПозицияСловаПоместить - ПозицияСловаВыбрать);
//	КоллекцияПолей = ЗарплатаКадрыОбщиеНаборыДанных.МассивПолейЗапроса(ТекстПолейЗапроса);
//
//	СписокПолей = Новый СписокЗначений;
//	СписокПолей.ЗагрузитьЗначения(КоллекцияПолей);
//	СписокПолей.СортироватьПоЗначению();
//
//	Для Каждого ЭлементСписка Из СписокПолей Цикл
//		ПолеПредставления = НовоеПолеПредставления(ЭлементСписка.Значение, """");
//		ДобавитьПолеПредставления(Описание, ПолеПредставления);
//	КонецЦикла;
//
//КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли