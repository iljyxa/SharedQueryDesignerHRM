// Copyright (c) 2025 Ilya Fedorov
// SPDX-License-Identifier: MIT
// https://github.com/iljyxa/SharedQueryDesignerHRM

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПолноеИмяОбработки = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();

	ИнициализироватьОписанияПредставлений();

	Элементы.ПараметрыВидСравнения.РежимВыбораИзСписка = Истина;
	Для Каждого КлючИЗначение Из ДоступныеВидыСравненияОтбора() Цикл
		Элементы.ПараметрыВидСравнения.СписокВыбора.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;

	ЗаполнитьСписокВыбораИсточникаДанных();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ВладелецФормы <> Неопределено Тогда
		УстановитьРежимВставки(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредставления

&НаКлиенте
Процедура ПредставленияПриАктивизацииСтроки(Элемент)

	ОтключитьОбработчикОжидания("ПредставленияПослеАктивизацииСтроки");
	ПодключитьОбработчикОжидания("ПредставленияПослеАктивизацииСтроки", 0.1, Истина);

КонецПроцедуры

//@skip-check module-structure-form-event-regions
&НаКлиенте
Процедура ПредставленияПослеАктивизацииСтроки()
	
	// TODO: Перенести на контекстный взыов сервера
	Представление = Элементы.Представления.ТекущиеДанные;

	Если Представление = Неопределено Тогда
		ИдентификаторПредставления = Неопределено;
		Элементы.ГруппаПравая.Доступность = Ложь;
		ДоступныеЛевыеЗначенияОтбора.Очистить();
	Иначе
		ИдентификаторПредставления = Представление.ИдентификаторПредставления;
		Элементы.ГруппаПравая.Доступность = Истина;
		Элементы.ПредставленияИсточникДанных.Видимость = Представление.ЕстьИсточникДанных;
		Элементы.ПредставленияФильтр.Видимость = Представление.ЕстьФильтр;
		Элементы.ПредставленияФильтр.АвтоОтметкаНезаполненного = Представление.ФильтрОбязателен;
		Элементы.ПредставленияФильтр.ОтметкаНезаполненного = Представление.ФильтрОбязателен
															 И ПустаяСтрока(Представление.Фильтр);
		ДоступныеЛевыеЗначенияОтбора.ЗагрузитьЗначения(ДоступныеЛевыеЗначенияОтбора(ИдентификаторПредставления));
	КонецЕсли;

	УстановитьОтборСтрок(Элементы.Поля, "ИдентификаторПредставления", ИдентификаторПредставления);
	УстановитьОтборСтрок(Элементы.Параметры, "ИдентификаторПредставления", ИдентификаторПредставления);

	УстановитьПодсказкуЗаполненияПолей();

КонецПроцедуры

//@skip-check module-structure-form-event-regions
&НаКлиенте
Процедура ПредставленияИсточникДанныхПриИзменении(Элемент)
	ПредставленияИсточникДанныхПриИзмененииНаСервере();
	УстановитьПодсказкуЗаполненияПолей();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоля

&НаКлиенте
Процедура ПоляПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ИдентификаторПредставления = Элементы.Представления.ТекущиеДанные.ИдентификаторПредставления;
		Элемент.ТекущиеДанные.Используется = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриИзменении(Элемент)
	ДоступныеЛевыеЗначенияОтбора.ЗагрузитьЗначения(ДоступныеЛевыеЗначенияОтбора(Элементы.Представления.ТекущиеДанные.ИдентификаторПредставления));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметры

&НаКлиенте
Процедура ПараметрыПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.Параметры.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЗначениеЭтоВыражение Тогда
			Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		Иначе
			Элементы.ПараметрыЗначение.ОграничениеТипа = ТекущиеДанные.Типы;
		КонецЕсли;

		Если ТекущиеДанные.Отбор Тогда
			Элементы.ПараметрыИмя.КнопкаВыбора = Истина;
		КонецЕсли;
	Иначе
		Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов;
		Элементы.ПараметрыИмя.КнопкаВыбора = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Представление = Элементы.Представления.ТекущиеДанные;
		Элемент.ТекущиеДанные.Отбор = Представление.ДоступныОтборы;
		Элемент.ТекущиеДанные.ИдентификаторПредставления = Представление.ИдентификаторПредставления;
		Элемент.ТекущиеДанные.Используется = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗначениеЭтоВыражениеПриИзменении(Элемент)
	ПараметрыПриАктивизацииСтроки(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыИмяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если Элементы.Параметры.ТекущиеДанные.Отбор Тогда
		СтандартнаяОбработка = Ложь;

		ДанныеВыбора = Новый СписокЗначений;

		Для Каждого ЭлементСписка Из ДоступныеЛевыеЗначенияОтбора Цикл
			Если СтрНайти(ВРег(ЭлементСписка.Значение), ВРег(Текст)) > 0 Тогда
				ДанныеВыбора.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыИмяНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	Если Элементы.Параметры.ТекущиеДанные.Отбор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДоступныеЛевыеЗначенияОтбора;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьТекстЗапроса(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстЗапросаПредставления", СформироватьТекстЗапросаНаСервере());
	ОткрытьФорму(ПолноеИмяОбработки + ".Форма.ТекстЗапроса", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстЗапросаПредставления(Команда)
	ТекстЗапроса = СформироватьТекстЗапросаНаСервере();
	Закрыть(ТекстЗапроса);
КонецПроцедуры

&НаКлиенте
Процедура РедакторОписаний(Команда)
	ОткрытьФорму(ПолноеИмяОбработки + ".Форма.РедакторОписанийПредставлений", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоИспользуемые(Команда)

	ОтображатьТолькоИспользуемыеПоляИПараметры = Не ОтображатьТолькоИспользуемыеПоляИПараметры;

	Элементы.ПоляТолькоИспользуемые.Пометка = ОтображатьТолькоИспользуемыеПоляИПараметры;
	Элементы.ПараметрыТолькоИспользуемые.Пометка = ОтображатьТолькоИспользуемыеПоляИПараметры;

	ИмяПоля = "Используется";
	Если ОтображатьТолькоИспользуемыеПоляИПараметры Тогда
		УстановитьОтборСтрок(Элементы.Поля, ИмяПоля, Истина);
		УстановитьОтборСтрок(Элементы.Параметры, ИмяПоля, Истина);
	Иначе
		УдалитьОтборСтрок(Элементы.Поля, ИмяПоля);
		УдалитьОтборСтрок(Элементы.Параметры, ИмяПоля);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиПараметров(Команда)
	УстановитьСнятьФлажки(Объект.Параметры.НайтиСтроки(Новый Структура(Элементы.Параметры.ОтборСтрок)), Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиПараметров(Команда)
	УстановитьСнятьФлажки(Объект.Параметры.НайтиСтроки(Новый Структура(Элементы.Параметры.ОтборСтрок)), Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиПолей(Команда)
	УстановитьСнятьФлажки(Объект.Поля.НайтиСтроки(Новый Структура(Элементы.Поля.ОтборСтрок)), Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиПолей(Команда)
	УстановитьСнятьФлажки(Объект.Поля.НайтиСтроки(Новый Структура(Элементы.Поля.ОтборСтрок)), Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СброситьТекущиеНастройки(Команда)
	ИнициализироватьОписанияПредставлений();
	//@skip-check invocation-form-event-handler
	ПредставленияПриАктивизацииСтроки(Элементы.Представления);
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПроекта(Команда)
	ПерейтиПоНавигационнойСсылке("https://github.com/iljyxa/SharedQueryDesignerHRM");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормой

&НаКлиенте
Процедура УстановитьПодсказкуЗаполненияПолей()

	Представление = Элементы.Представления.ТекущиеДанные;

	Если Представление = Неопределено Тогда
		Элементы.ГруппаПодсказкаПолей.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПодсказкаПолей.Видимость = Представление.ЕстьИсточникДанных
												  И ПустаяСтрока(Представление.ИсточникДанных);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимВставки(Форма)

	Форма.Параметры.РежимВставки = Истина;
	Форма.Элементы.ФормаВставитьТекстЗапросаПредставления.Видимость = Истина;
	Форма.Элементы.ФормаВставитьТекстЗапросаПредставления.КнопкаПоУмолчанию = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(ЭлементФормыТаблица, ИмяПоля, Значение)

	Если ТипЗнч(ЭлементФормыТаблица.ОтборСтрок) = Тип("ФиксированнаяСтруктура") Тогда
		ОтборСтрок = Новый Структура(ЭлементФормыТаблица.ОтборСтрок);
	Иначе
		ОтборСтрок = Новый Структура;
	КонецЕсли;

	ОтборСтрок.Вставить(ИмяПоля, Значение);

	ЭлементФормыТаблица.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьОтборСтрок(ЭлементФормыТаблица, ИмяПоля)

	Если ЭлементФормыТаблица.ОтборСтрок = Неопределено Или Не ЭлементФормыТаблица.ОтборСтрок.Свойство(ИмяПоля) Тогда

		Возврат;
	КонецЕсли;

	ОтборСтрок = Новый Структура(ЭлементФормыТаблица.ОтборСтрок);
	ОтборСтрок.Удалить(ИмяПоля);
	ЭлементФормыТаблица.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСнятьФлажки(Таблица, Установить)

	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Используется = Установить;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОписанияПредставлений()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОписанияПредставлений = ОбработкаОбъект.ОписанияПредставленийПоКонфигурации();
	ОбработкаОбъект.Импортировать(ОписанияПредставлений);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

	МодульОбщегоНазначения = ОбработкаОбъект.МодульОбщегоНазначения();

	Для Каждого СтрокаТаблицы Из Объект.Параметры Цикл
		СтрокаТаблицы.Типы = МодульОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаТаблицы.ДоступныеТипы);
		СтрокаТаблицы.Используется = СтрокаТаблицы.Обязательный;
	КонецЦикла;

КонецПроцедуры

// TODO: Реализовать или удалить. Отображение состояния заполнения на форме
&НаСервере
Функция ЕстьНезаполненныеОбязательныеПараметры(ИдентификаторПредставления)

	ЕстьНезаполненныеОбязательныеПараметры = Ложь;

	ПараметрыОтбора = Новый Структура("ИдентификаторПредставления,Обязательный", ИдентификаторПредставления, Истина);
	НайденныеПараметры = Объект.Параметры.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Параметр Из НайденныеПараметры Цикл
		Если Не ЗначениеЗаполнено(Параметр.Значение) Тогда
			ЕстьНезаполненныеОбязательныеПараметры = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ПараметрыОтбора = Новый Структура("ИдентификаторПредставления", ИдентификаторПредставления);
	НайденныеСтроки = Объект.Представления.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Представление = НайденныеСтроки[0];

		Если Представление.ЕстьФильтр И Представление.ФильтрОбязателен И ПустаяСтрока(Представление.Фильтр) Тогда

			ЕстьНезаполненныеОбязательныеПараметры = Истина;
		КонецЕсли;

		Если Представление.ЕстьИсточникДанных И ПустаяСтрока(Представление.ИсточникДанных) Тогда

			ЕстьНезаполненныеОбязательныеПараметры = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат ЕстьНезаполненныеОбязательныеПараметры;

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораИсточникаДанных()

	СписокВыбора = Элементы.ПредставленияИсточникДанных.СписокВыбора;
	СписокВыбора.Очистить();
	КартинкаРегистрСведений = БиблиотекаКартинок.РегистрСведений;

	Для Каждого РегистрСведений Из Метаданные.РегистрыСведений Цикл
		Если РегистрСведений.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
			 Или СтрНачинаетсяС(РегистрСведений.Имя, "Удалить") Тогда

			Продолжить;
		КонецЕсли;

		ЭлементСписка = СписокВыбора.Добавить();
		ЭлементСписка.Значение = РегистрСведений.Имя;
		ЭлементСписка.Представление = СтрШаблон("%1 (%2)", РегистрСведений.Представление(), РегистрСведений.Имя);
		ЭлементСписка.Картинка = КартинкаРегистрСведений;
	КонецЦикла;

	СписокВыбора.СортироватьПоПредставлению();

КонецПроцедуры

&НаСервере
Процедура ПредставленияИсточникДанныхПриИзмененииНаСервере()

	Представление = Объект.Представления.НайтиПоИдентификатору(Элементы.Представления.ТекущаяСтрока);

	ПоляПредставления = Объект.Поля.НайтиСтроки(Новый Структура("ИдентификаторПредставления",
																Представление.ИдентификаторПредставления));

	Для Каждого Поле Из ПоляПредставления Цикл
		Объект.Поля.Удалить(Поле);
	КонецЦикла;

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	Если ВРег(Представление.Имя) = ВРег("ТаблицаРегистра")
		 Или ВРег(Представление.Имя) = ВРег("СрезПоследних")
		 Или ВРег(Представление.Имя) = ВРег("СрезПервых") Тогда

		МодульОбщегоНазначения = ОбработкаОбъект.МодульОбщегоНазначения();
		МодульЗарплатаКадрыОбщиеНаборыДанных = МодульОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыОбщиеНаборыДанных");

		ИмяВТФильтра = "ВТФильтр";
		ОписаниеФильтра = МодульЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТФильтра,
																									  "Период");

		Если ВРег(Представление.Имя) = ВРег("ТаблицаРегистра") Тогда
			Запрос = МодульЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(Представление.ИсточникДанных,
																			  Истина,
																			  ОписаниеФильтра);
		ИначеЕсли ВРег(Представление.Имя) = ВРег("СрезПоследних") Тогда
			Запрос = МодульЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(Представление.ИсточникДанных,
																				  Истина,
																				  ОписаниеФильтра,
																				  ,
																				  Истина);
		Иначе
			Запрос = МодульЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(Представление.ИсточникДанных,
																				  Истина,
																				  ОписаниеФильтра,
																				  ,
																				  Ложь);
		КонецЕсли;

		ОписаниеПредставления = ОбработкаОбъект.НовоеОписаниеПредставления();
		ОбработкаОбъект.ПоляЗапросаВДоступныеПоляПредставления(Запрос.Текст, ОписаниеПредставления);

		Для Каждого ДоступноеПоле Из ОписаниеПредставления.ДоступныеПоля Цикл
			Поле = Объект.Поля.Добавить();
			ЗаполнитьЗначенияСвойств(Поле, ДоступноеПоле);
			Поле.ИдентификаторПредставления = Представление.ИдентификаторПредставления;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СформироватьТекстЗапросаНаСервере()

	ТекущаяСтрокаПредставления = Элементы.Представления.ТекущаяСтрока;
	Если ТекущаяСтрокаПредставления = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	Представление = Объект.Представления.НайтиПоИдентификатору(ТекущаяСтрокаПредставления);
	ПараметрыОтбора = Новый Структура("Используется,ИдентификаторПредставления",
									  Истина,
									  Представление.ИдентификаторПредставления);
	ВыбранныеПоля = Объект.Поля.НайтиСтроки(ПараметрыОтбора);
	ВыбранныеПараметры = Объект.Параметры.НайтиСтроки(ПараметрыОтбора);

	Возврат ТекстЗапросаПредставления(Представление.Имя, ВыбранныеПоля, ВыбранныеПараметры, Представление);

КонецФункции

&НаСервере
Функция ДоступныеЛевыеЗначенияОтбора(ИдентификаторПредставления)

	ПараметрыОтбора = Новый Структура("ИдентификаторПредставления", ИдентификаторПредставления);

	Возврат Объект.Поля.Выгрузить(ПараметрыОтбора).ВыгрузитьКолонку("Имя");

КонецФункции

#КонецОбласти

#Область РаботаСЗапросом

&НаСервереБезКонтекста
Функция ТекстЗапросаПредставления(Знач ИмяПредставления,
								  Знач ВыбранныеПоля,
								  Знач ВыбранныеПараметры,
								  Знач ПараметрыПредставления)

	ТекстЗапросаПредставления =
	"ВЫБРАТЬ
	|	&Поля";

	МассивПолей = Новый Массив;
	ШаблонПоля = "%1 КАК %2";
	Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		МассивПолей.Добавить(СтрШаблон(ШаблонПоля, ВыбранноеПоле.Выражение, ВыбранноеПоле.Имя));
	КонецЦикла;
	ТекстЗапросаПредставления = СтрЗаменить(ТекстЗапросаПредставления, "&Поля", СтрСоединить(МассивПолей, ","
																										  + Символы.ПС
																										  + Символы.Таб));
	ТекстЗапросаПредставления = ТекстЗапросаПредставления
								+ "
								  |ПОМЕСТИТЬ Представления_"
								+ ИмяПредставления
								+ ?(Не ПустаяСтрока(ПараметрыПредставления.ИсточникДанных),
									"_" + ПараметрыПредставления.ИсточникДанных,
									"")
								+ ?(Не ПустаяСтрока(ПараметрыПредставления.Уточнение),
									"_" + ПараметрыПредставления.Уточнение,
									"");

	Если Не ПустаяСтрока(ПараметрыПредставления.Фильтр) Тогда
		ТекстЗапросаПредставления = ТекстЗапросаПредставления
									+ "
									  |ИЗ
									  |	"
									+ ПараметрыПредставления.Фильтр
									+ " КАК "
									+ ПараметрыПредставления.Фильтр;
	КонецЕсли;

	Если ВыбранныеПараметры.Количество() > 0 Тогда
		ТекстЗапросаПредставления = ТекстЗапросаПредставления + "
																|ГДЕ
																|	&Отборы";
	КонецЕсли;

	МассивОтборов = Новый Массив;
	Для Каждого ВыбранныйПараметр Из ВыбранныеПараметры Цикл
		МассивОтборов.Добавить(ВыбранныйПараметрВВыражениеЯзыкаЗапроса(ВыбранныйПараметр));
	КонецЦикла;
	ТекстЗапросаПредставления = СтрЗаменить(ТекстЗапросаПредставления, "&Отборы", СтрСоединить(МассивОтборов, Символы.ПС
																											  + Символы.Таб
																											  + "И "));

	Возврат ТекстЗапросаПредставления;

КонецФункции

&НаСервереБезКонтекста
Функция ВыбранныйПараметрВВыражениеЯзыкаЗапроса(ВыбранныйПараметр)

	ШаблонОтбора = """%1"" = %2";
	Если ВыбранныйПараметр.Отбор Тогда
			// Необходимо преобразовать в 3 отдельных отбора ЛевоеЗначение, ВидСравнения, ПравоеЗначение
		Возврат СтрШаблон(ШаблонОтбора, "ЛевоеЗначение", """" + ВыбранныйПараметр.Имя + """")
				+ Символы.ПС
				+ Символы.Таб
				+ "И "
				+ СтрШаблон(ШаблонОтбора, "ВидСравнения", """"
														  + ЗначениеПараметраВВыражениеЯзыкаЗапроса(ВыбранныйПараметр.ВидСравнения)
														  + """")
				+ Символы.ПС
				+ Символы.Таб
				+ "И "
				+ СтрШаблон(ШаблонОтбора, "ПравоеЗначение", ?(ВыбранныйПараметр.ЗначениеЭтоВыражение,
															  Строка(ВыбранныйПараметр.Значение),
															  """"
															  + ЗначениеПараметраВВыражениеЯзыкаЗапроса(ВыбранныйПараметр.Значение)
															  + """"));
	Иначе
		Возврат СтрШаблон(ШаблонОтбора,
						  ВыбранныйПараметр.Имя,
						  ЗначениеПараметраВВыражениеЯзыкаЗапроса(ВыбранныйПараметр.Значение));
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеПараметраВВыражениеЯзыкаЗапроса(Значение)

	ТипЗначения = ТипЗнч(Значение);

	Если ТипЗначения = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ='""ДАТАВРЕМЯ(""yyyy, MM, dd, HH, mm, ss"")""';");
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧН=; ЧГ=;");
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Возврат Формат(Значение, "БЛ=ЛОЖЬ; БИ=ИСТИНА;");
	ИначеЕсли ТипЗначения = Тип("ВидСравненияКомпоновкиДанных") Тогда
		СоответствиеВидовСравнений = ДоступныеВидыСравненияОтбора();

		ВыражениеЯзыкаЗапроса = СоответствиеВидовСравнений[Значение];
		Если ВыражениеЯзыкаЗапроса = Неопределено Тогда
			ВызватьИсключение "Недопустимый вид сравнения " + Значение;
		КонецЕсли;

		Возврат ВыражениеЯзыкаЗапроса;
	КонецЕсли;

	Возврат Строка(Значение);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеВидыСравненияОтбора()

	СоответствиеВидовСравнений = Новый Соответствие;
	СоответствиеВидовСравнений.Вставить(ВидСравненияКомпоновкиДанных.Больше, ">");
	СоответствиеВидовСравнений.Вставить(ВидСравненияКомпоновкиДанных.Меньше, "<");
	СоответствиеВидовСравнений.Вставить(ВидСравненияКомпоновкиДанных.Равно, "=");
	СоответствиеВидовСравнений.Вставить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ">=");
	СоответствиеВидовСравнений.Вставить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ">=");
	СоответствиеВидовСравнений.Вставить(ВидСравненияКомпоновкиДанных.ВИерархии, "В ИЕРАРХИИ");
	СоответствиеВидовСравнений.Вставить(ВидСравненияКомпоновкиДанных.ВСписке, "В");
	СоответствиеВидовСравнений.Вставить(ВидСравненияКомпоновкиДанных.НеРавно, "<>");

	Возврат СоответствиеВидовСравнений;

КонецФункции

#КонецОбласти

#КонецОбласти